import os
from utils import get_descope_handler
from crhelper import CfnResource

logger = Logger()
helper = CfnResource()



@helper.create
@helper.update
def do_action(event, _):
    """ Called as part of bootstrap template. 
        Inserts/Updates Settings table based upon the resources deployed inside bootstrap template
        We use these settings inside tenant template

    Args:
            event ([type]): [description]
            _ ([type]): [description]
    """
    project_id_id = event['ResourceProperties']['ProjectID']
    mgmt_client_secret_mgmt_key = event['ResourceProperties']['ClientSecret']
   

#domain = os.environ('DOMAIN')
mgmt_client_id = os.getenv('PROJECT_ID')
mgmt_client_secret_mgmt_key = os.getenv('CLIENT_SECRET_MGMT_KEY')

@helper.create
def create_client(event, _):
    descope = get_descope_handler(mgmt_client_id, mgmt_client_secret_mgmt_key)

    try:
        logger.info("Going to create a new access key")
        client_data = {
            name="Access Key for SBT",
            description="Autogenerated Access Key for SBT"
        }
        # Creating client secret (access key)
        client = descope.mgmt.access_key.create(client_data)

        # Extract the client ID and key ID
        client_id = client['key']['clientId']
        access_key_id = client ['key']['id']

        # Log or return the access key 
        logger.info(f"Access key created: {access_key_id}")

 return {
            'ClientId': client_id,
            'AccessKey': access_key_id  # Returning only the key, not the entire response
        }
    except Exception as e:
        logger.error(f"Error creating client or access key: {str(e)}")
        raise e




        

        


  
